@startuml

participant "PowerOn"

participant CpuInPg as "CpuInternalProgram"

participant BootLoader as "BootLoader"

participant Kernel as "Kernel"

participant InitProcess as "InitProcess"

participant Zygote as "Zygote"

participant SystemServer as "SystemServer"

participant ActivityManagerService as "ActivityManagerService.java"

participant ActivityThread as "ActivityThread.java"

'sequence below

activate PowerOn
PowerOn -> CpuInPg : 上电

activate CpuInPg
CpuInPg -> BootLoader : 根据硬件环境，\n加载对应位置的BootLoader
deactivate CpuInPg

activate BootLoader
BootLoader -> Kernel : 汇编程序引导，调用\nkernel/init/main.c#start_kernel()\n加载内核
deactivate BootLoader

activate Kernel
Kernel -> InitProcess : 调用\kernel/init/main.c\nrest_init()启动init进程

activate InitProcess
InitProcess -> InitProcess : 启动core服务
InitProcess -> Zygote : 启动main服务
deactivate InitProcess

activate Zygote
Zygote -> Zygote : 初始化AndroidRuntime
Zygote -> Zygote : 初始化启动虚拟机
Zygote -> Zygote : 注册框架jni方法
Zygote -> Zygote : 注册zygote socket\
\n等待fork请求
Zygote -> Zygote : 预加载系统资源
Zygote -> SystemServer : 启动系统服务

activate SystemServer
Zygote --> InitProcess
activate InitProcess
InitProcess -> InitProcess : 启动late-start服务
deactivate InitProcess


SystemServer -> SystemServer : fork出system-server子进程
SystemServer -> SystemServer : 执行system server的dex优化
SystemServer -> SystemServer : 根据systemClasspPath\
\n创建并设置当前线程的ClassLoader
SystemServer -> SystemServer : 执行通用runtime初始化
SystemServer -> SystemServer : 加载system_servers静态库
SystemServer -> SystemServer : 创建SystemServerManager对象
SystemServer -> SystemServer : startBootstrapServices
SystemServer -> SystemServer : startCoreServices
SystemServer -> SystemServer : startOtherServices
SystemServer -> ActivityManagerService : 调用systemReady\n通知启动Launcher

activate ActivityManagerService
ActivityManagerService -> ActivityManagerService : 检查进程和Activity记录，调度Activity到栈顶
ActivityManagerService -> ActivityManagerService : 通过Process.start启动新进程，\n向Zygote发送start命令
ActivityManagerService -> ActivityManagerService : 监听App进程启动超时
ActivityManagerService -> ActivityManagerService : Zygote fork出子进程，返回pid
ActivityManagerService -> ActivityManagerService : 执行通用runtime初始化
ActivityManagerService -> ActivityThread : 创建ActivityThread

activate ActivityThread
ActivityThread -> ActivityThread : 创建ApplicationThread，作为Binder通信客户端
ActivityThread -> ActivityManagerService : 调用attach方法，将ApplicationThread和App进程信息绑定
deactivate ActivityThread

activate ActivityManagerService
ActivityManagerService -> ActivityManagerService : 检查App进程信息，并进行相关初始化
ActivityManagerService -> ActivityManagerService : 移除App启动超时监听
ActivityManagerService -> ActivityManagerService : 执行dex字节码对齐
ActivityManagerService --> ActivityThread :
deactivate ActivityManagerService

activate ActivityThread

ActivityThread -> ActivityThread : 创建Application实例,初始化硬件、资源、配置等信息, \
\n打开相关的监听器和调试器

ActivityThread -> ActivityThread : 发布ContentProvider

ActivityThread -> ActivityThread : 创建Instrumentation对象，回调onCreate方法

ActivityThread -> ActivityThread : 调用ActivityStackSupervisor的attach方法，\
\n拉起之前调度在顶的Activity

ActivityThread -> ActivityThread : 调用attach方法，启动静态注册的服务的

ActivityThread -> ActivityThread : 注册并分发事件到静态广播

ActivityThread -> ActivityThread : 等待用户操作

deactivate ActivityThread
deactivate ActivityManagerService
deactivate SystemServer
deactivate Zygote
deactivate Kernel
deactivate PowerOn
@enduml