@startuml

participant AppMain as "app_main.cpp"
participant AppRuntime
participant AndroidRuntime as "AndroidRuntime.cpp"
participant ZygoteInit as "ZygoteInit.java"
participant RuntimeInit as "RuntimeInit.java"
participant SamplingProfilerIntegration as "SamplingProfilerIntegration.java"

ref over AppMain : class_start_main.puml

-> AppMain : class_start main call\
 \nmain(int argc, char* const argv[])

note right of AppMain : case zygote start, argv = \
\n -Xzygote /system/bin --zygote --start-system-server\
\ncase app start, agv = need-find-out~

activate AppMain
AppMain -> AppRuntime : create AppRuntime instance
deactivate AppMain

activate AppRuntime
AppRuntime --> AppMain : constructor return
deactivate AppRuntime

activate AppMain
AppMain -> AppMain : init args
note right of AppMain : args include : \nzygote(--zygote)\
\nstartSystemServer(--start-system-server)\
\napplication(--application)\
\nniceName(--nice-name=xx)\
\nclassName(--xx)

alt className

note right of AppMain : case zygote init className = null \
\ncase app start className = android.app.ActivityThread\

else Not Empty

    alt application

    note right of AppMain : todo// describe application value

    else no
        AppMain -> AppMain : add arg tool
    else yes
        AppMain -> AppMain : add arg application, will be used in RuntimeInit.main()
    end
    AppMain -> AppRuntime : setClassNameAndArgs
    deactivate AppMain

    activate AppRuntime
    AppRuntime --> AppMain : method return
    deactivate AppRuntime
    activate AppMain

else Empty

    AppMain -> AppMain : maybeCreateDalvikCache()

    AppMain -> AppMain : init args for zygote

    note right of AppMain : args include :\
    \nstart-system-server"\
    \n--abi-list=property_get(ABI_LIST_PROPERTY)\
    \nall args passed in remained

end

AppMain -> AppMain : set nice name

alt zygote

else yes
    AppMain -> AndroidRuntime : runtime.start("com.android.internal.os.ZygoteInit", args, zygote);

else no & className not empty
    AppMain -> AndroidRuntime : runtime.start("com.android.internal.os.RuntimeInit", args, zygote);

else no & className empty

    AppMain -> AppMain : app_usage(); \nreturn 10;
    deactivate AppMain
    note right of AppMain : print error&usage and return code 10.
end


AppMain -> AndroidRuntime : if called start(className, args, zygote)
activate AndroidRuntime
AndroidRuntime -> AndroidRuntime : setEnv ANDROID_ROOT to "/system"
AndroidRuntime -> AndroidRuntime : startVm(&mJavaVM, &env, zygote)
AndroidRuntime -> AppRuntime : onVmCreated(env);
deactivate AndroidRuntime

activate AppRuntime
AppRuntime --> AndroidRuntime : method return
deactivate AppRuntime

activate AndroidRuntime
AndroidRuntime -> AndroidRuntime : startReg(env)

ref over AndroidRuntime : register_framework_native_method.puml
AndroidRuntime -> AndroidRuntime : init jni call for static method main\
\n, by given className and args.

AndroidRuntime -> ZygoteInit : call static method main with args
deactivate AndroidRuntime

alt className


activate ZygoteInit

note right of AndroidRuntime : className passed by app_main.cpp:main()\
\nfrom init.rc execution, or app start parent process,\
\nif from app start action, we are in child process here)

else ZygoteInit

ref over ZygoteInit : zygote_init.puml

else RuntimeInit

ref over ZygoteInit : runtime_init.puml

end


deactivate AndroidRuntime

@enduml